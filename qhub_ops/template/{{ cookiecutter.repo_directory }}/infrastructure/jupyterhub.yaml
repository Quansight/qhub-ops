{% if cookiecutter.security.authentication.type == 'Auth0' %}
auth:
  type: custom
  custom:
    className: "oauthenticator.auth0.Auth0OAuthenticator"
    config:
      client_id: "{{ cookiecutter.security.authentication.config.client_id }}"
      client_secret: "{{ cookiecutter.security.authentication.config.client_secret }}"
      oauth_callback_url: "{{ cookiecutter.security.authentication.config.oauth_callback_url }}"
      scope: {{ cookiecutter.security.authentication.config.scope | jsonify }}
      auth0_subdomain: "{{ cookiecutter.security.authentication.config.auth0_subdomain }}"
{% elif cookiecutter.security.authentication.type == 'GitHub' %}
auth:
  type: github
  github:
    clientId: "{{ cookiecutter.security.authentication.config.client_id }}"
    clientSecret: "{{ cookiecutter.security.authentication.config.client_secret }}"
    callbackUrl: "{{ cookiecutter.security.authentication.config.oauth_callback_url }}"
{% endif %}


hub:
{% if cookiecutter.security.authentication.type == 'Auth0' %}
  extraEnv:
    AUTH0_SUBDOMAIN: "{{ cookiecutter.security.authentication.config.auth0_subdomain }}"
{% endif %}
  extraConfig:
    01-spawner: |
      QHUB_USER_MAPPING = {{ cookiecutter.security.users }}
      QHUB_GPU_INSTANCES = {{ cookiecutter.gpus.count }}
      QHUB_GROUP_MAPPING = {{ cookiecutter.security.groups }}
      QHUB_PROFILES = {{ cookiecutter.profiles.jupyterlab }}


      def qhub_generate_nss_files():
          passwd = []
          passwd_format = '{username}:x:{uid}:{gid}:{username}:/home/jovyan:/bin/bash'
          for username, config in QHUB_USER_MAPPING.items():
              uid = config['uid']
              gid = QHUB_GROUP_MAPPING[config['primary_group']]['gid']
              passwd.append(passwd_format.format(username=username, uid=uid, gid=gid))

          group = []
          group_format = '{groupname}:x:{gid}:'
          for groupname, config in QHUB_GROUP_MAPPING.items():
              gid = config['gid']
              group.append(group_format.format(groupname=groupname, gid=gid))

          return '\n'.join(passwd), '\n'.join(group)


      def qhub_list_admins(users):
          return [k for k,v in users.items() if v['primary_group'] == 'admin']


      def qhub_list_users(users):
          return [k for k,v in users.items() if v['primary_group'] != 'admin']


      def qhub_list_user_groups(username):
          user = QHUB_USER_MAPPING[username]
          return set([user['primary_group']] + user.get('secondary_groups', []))


      def qhub_configure_profile(username, safe_username, profile):
          user = QHUB_USER_MAPPING[username]
          uid = user['uid']
          primary_gid = QHUB_GROUP_MAPPING[user['primary_group']]['gid']
          secondary_gids = [QHUB_GROUP_MAPPING[_]['gid'] for _ in user.get('secondary_groups', [])]

          profile['kubespawner_override']['environment'] = {
             'LD_PRELOAD': 'libnss_wrapper.so',
             'NSS_WRAPPER_PASSWD': '/tmp/passwd',
             'NSS_WRAPPER_GROUP': '/tmp/group',
             'HOME': '/home/jovyan',
          }

          passwd, group = qhub_generate_nss_files()
          profile['kubespawner_override']['lifecycle_hooks'] = {
              "postStart": {
                  "exec": {
                      "command": ["/bin/sh", "-c", (
                           "echo '{passwd}' > /tmp/passwd && "
                           "echo '{group}' > /tmp/group && "
                           "ln -sfn /home/shared /home/jovyan/shared"
                      ).format(passwd=passwd, group=group)]
                  }
              }
          }

          profile['kubespawner_override']['init_containers'] = [
              {
                   "name": "init-nfs",
                   "image": "busybox:1.31",
                   "command": ["sh", "-c", ' && '.join([
                        "mkdir -p /mnt/home/{username}",
                        "chmod 700 /mnt/home/{username}",
                        "chown {uid}:{primary_gid} /mnt/home/{username}",
                        "mkdir -p /mnt/home/shared",
                        "chmod 777 /mnt/home/shared"
                   ] + ["mkdir -p /mnt/home/shared/{groupname} && chmod 770 /mnt/home/shared/{groupname} && chown 0:{gid} /mnt/home/shared/{groupname}".format(groupname=groupname, gid=config['gid']) for groupname, config in QHUB_GROUP_MAPPING.items()]).format(username=safe_username, uid=uid, primary_gid=primary_gid)],
                   "securityContext": {"runAsUser": 0},
                   "volumeMounts": [{"mountPath": "/mnt", "name": "home"}]
              }
          ]

          profile['kubespawner_override']['uid'] = uid
          profile['kubespawner_override']['gid'] = primary_gid
          profile['kubespawner_override']['supplemental_gids'] = secondary_gids
          profile['kubespawner_override']['fs_gid'] = primary_gid

          if QHUB_GPU_INSTANCES is not None:
            profile['kubespawner_override']['extra_resource_limits'] = {
              'nvidia.com/gpu': QHUB_GPU_INSTANCES
            }
          return profile

      def qhub_list_available_profiles(username):
          import escapism
          import string
          safe_chars = set(string.ascii_lowercase + string.digits)
          safe_username = escapism.escape(username, safe=safe_chars, escape_char='-').lower()

          exclude_keys = {'users', 'groups'}

          groups = qhub_list_user_groups(username)

          available_profiles = []
          for profile in QHUB_PROFILES:
              filtered_profile = qhub_configure_profile(username, safe_username, {k: v for k,v in profile.items() if k not in exclude_keys})

              if 'users' in profile:
                  if username in profile['users']:
                      available_profiles.append(filtered_profile)
              elif 'groups' in profile:
                  if len(groups & set(profile['groups'])) != 0:
                      available_profiles.append(filtered_profile)
              else:
                  available_profiles.append(filtered_profile)

          return available_profiles


      c.JupyterHub.admin_access = True
      c.Authenticator.admin_users = qhub_list_admins(QHUB_USER_MAPPING)
      c.Authenticator.whitelist = qhub_list_users(QHUB_USER_MAPPING)


      async def custom_options_form(self):
          self.profile_list = qhub_list_available_profiles(self.user.name)

          # Let KubeSpawner inspect profile_list and decide what to return
          return self._options_form_default()


      c.KubeSpawner.options_form = custom_options_form

    02-themeing: |
      c.JupyterHub.template_paths = ['/usr/local/share/jupyterhub/custom_templates/']
      c.JupyterHub.template_vars = {
          'pangeo_hub_title': 'QHub - {{ cookiecutter.project_name }}',
          'pangeo_hub_subtitle': 'Autoscaling Compute Environment on Digital Ocean',
          'pangeo_welcome': """Welcome to jupyter.{{ cookiecutter.domain }}. It is maintained by the <a href="http://quansight.com">Quansight staff</a>. The hub's configuration is stored in the github repository based on <a href="https://github.com/Quansight/qhub-kubernetes/">https://github.com/Quansight/qhub-kubernetes/</a>. To provide feedback and report any technical problems, please use the <a href="https://github.com/Quansight/qhub-kubernetes//issues">github issue tracker</a>."""
      }

cull:
  enabled: true
  timeout: 1800 # cull after 30min of inactivity
  every: 600
